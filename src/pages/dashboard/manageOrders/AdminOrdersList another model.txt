import React, { useState } from "react";
import { useGetAllOrdersQuery, useUpdateOrderMutation, useDeleteOrderMutation, useSendOrderNotificationMutation } from "../../../redux/features/orders/ordersApi.js";
import Swal from "sweetalert2";

const d = () => {
  const { data: orders, isLoading, error, refetch } = useGetAllOrdersQuery();
  const [updateOrder] = useUpdateOrderMutation();
  const [deleteOrder] = useDeleteOrderMutation();
  const [sendOrderNotification] = useSendOrderNotificationMutation();
  const [editingOrder, setEditingOrder] = useState(null);
  const [updatedValues, setUpdatedValues] = useState({});
  const [tailorAssignments, setTailorAssignments] = useState({});

  // ✅ Handle Save Order Changes
  const handleSave = async (orderId) => {
    try {
      await updateOrder({
        orderId,
        ...updatedValues[orderId],
        tailorAssignments: tailorAssignments[orderId],
      }).unwrap();

      Swal.fire("Success", "Order updated successfully!", "success");

      setEditingOrder(null);
      setUpdatedValues((prev) => ({ ...prev, [orderId]: {} })); // Reset edited order values
      await refetch();
    } catch (error) {
      Swal.fire("Error", "Failed to update order. Please try again.", "error");
    }
  };

  // ✅ Enable Editing Mode
  const handleStartEditing = (orderId) => {
    setEditingOrder(orderId);
    setUpdatedValues((prev) => ({ ...prev, [orderId]: {} }));
  };

  // ✅ Handle Change in Editable Fields for Specific Order
  const handleChange = (orderId, field, value) => {
    setUpdatedValues((prev) => ({
      ...prev,
      [orderId]: { 
        ...prev[orderId],
        [field]: value
      }
    }));
  };

  // ✅ Handle Assigning a Tailor for Each Product
  const handleTailorChange = (orderId, productId, tailorName) => {
    setTailorAssignments((prev) => ({
      ...prev,
      [orderId]: {
        ...prev[orderId],
        [productId]: tailorName,
      },
    }));
  };

  // ✅ Handle Send Notification
  const handleSendNotification = async (orderId, email, name, completionPercentage) => {
    try {
      await sendOrderNotification({ orderId, email, completionPercentage }).unwrap();

      const message =
        completionPercentage < 100
          ? `Progress update sent to ${name}: Order is ${completionPercentage}% completed.`
          : `Order completion notice sent to ${name}: Your order is fully ready!`;

      Swal.fire("Notification Sent", message, "success");
    } catch (error) {
      Swal.fire("Error", `Failed to send notification to ${name}. Please try again.`, "error");
    }
  };

  // ✅ Handle Delete Order
  const handleDelete = async (orderId) => {
    try {
      await deleteOrder(orderId).unwrap();
      Swal.fire("Success", "Order deleted successfully!", "success");
      refetch();
    } catch (error) {
      Swal.fire("Error", "Failed to delete order. Please try again.", "error");
    }
  };

  if (isLoading) return <p>Loading orders...</p>;
  if (error) return <p style={{ color: "red" }}>{error.message}</p>;

  return (
    <section className="py-1 bg-blueGray-50">
      <div className="w-full xl:w-10/12 mb-12 xl:mb-0 px-4 mx-auto mt-24">
        <div className="relative flex flex-col min-w-0 break-words bg-white w-full mb-6 shadow-lg rounded">
          <div className="rounded-t mb-0 px-4 py-3 border-0">
            <h3 className="font-semibold text-base text-blueGray-700">Manage Orders</h3>
          </div>

          <div className="block w-full overflow-x-auto">
            <table className="items-center bg-transparent w-full border border-collapse border-gray-300">
              <thead>
                <tr className="border-b border-gray-300">
                  <th>#</th>
                  <th>Order ID</th>
                  <th>Product IDs & Quantities</th>
                  <th>Customer</th>
                  <th>Mail</th>
                  <th>Phone</th>
                  <th>Address</th>
                  <th>Total Price</th>
                  <th>Paid</th>
                  <th>Delivered</th>
                  <th>Completion %</th>
                  <th>Tailors Assigned</th>
                  <th>Actions</th>
                </tr>
              </thead>

              <tbody>
                {orders.map((order, index) => (
                  <tr key={order._id} className="border-b border-gray-300">
                    <td>{index + 1}</td>
                    <td>{order._id.slice(0, 8)}...</td>

                    <td>
                      {order.products.map((prod) => (
                        <div key={prod.productId?._id || prod.productId}>
                          {prod.productId?._id.slice(0, 8)} | Qty: {prod.quantity}
                        </div>
                      ))}
                    </td>

                    <td>{order.name}</td>
                    <td>{order.email}</td>
                    <td>{order.phone}</td>
                    <td>{order.address.city}, {order.address.street}</td>
                    <td>{order.totalPrice} TND</td>

                    <td>
                      <select 
                        value={updatedValues[order._id]?.isPaid ?? order.isPaid}
                        onChange={(e) => handleChange(order._id, "isPaid", e.target.value === "true")}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                    </td>

                    <td>
                      <select 
                        value={updatedValues[order._id]?.isDelivered ?? order.isDelivered}
                        onChange={(e) => handleChange(order._id, "isDelivered", e.target.value === "true")}
                      >
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                      </select>
                    </td>

                    <td>
                      <input 
                        type="number" 
                        value={updatedValues[order._id]?.completionPercentage ?? order.completionPercentage}
                        onChange={(e) => handleChange(order._id, "completionPercentage", parseInt(e.target.value))}
                        className="border px-2 py-1 rounded w-full"
                      />
                    </td>

                    <td>
                      {order.products.map((prod) => (
                        <input 
                          key={prod.productId?._id || prod.productId} 
                          type="text" 
                          value={tailorAssignments[order._id]?.[prod.productId] || ""}
                          onChange={(e) => handleTailorChange(order._id, prod.productId, e.target.value)}
                          className="border px-2 py-1 rounded w-full"
                          placeholder="Enter tailor's name"
                        />
                      ))}
                    </td>

                    <td className="border px-6 py-4 text-xs flex flex-col space-y-2">
                      <button className="bg-yellow-500 py-2 px-4 rounded-full text-white text-sm hover:bg-yellow-600 transition" onClick={() => handleStartEditing(order._id)}>Edit</button>
                      <button className="bg-green-500 py-2 px-4 rounded-full text-white text-sm hover:bg-green-600 transition" onClick={() => handleSave(order._id)}>Save</button>
                      <button className="bg-blue-500 py-2 px-4 rounded-full text-white text-sm hover:bg-blue-600 transition" onClick={() => handleSendNotification(order._id, order.email, order.name, order.completionPercentage)}>Send Notification</button>
                      <button className="bg-red-500 py-2 px-4 rounded-full text-white text-sm hover:bg-red-600 transition" onClick={() => handleDelete(order._id)}>Delete</button>
                    </td>
                  </tr>
                ))}
              </tbody>

            </table>
          </div>
        </div>
      </div>
    </section>
  );
};

export default AdminOrdersList;
